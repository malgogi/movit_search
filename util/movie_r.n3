@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>.
@prefix genres: <http://localhost:9000/n3/genres#>.
@prefix actors: <http://localhost:9000/n3/actors#>.
@prefix : <http://localhost:9000/n3/movies#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.

#object difference rule
{ 
	?O1 :id ?I1;
	  :genre ?L1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?L2;
	  :date ?D2. 
  	(?I1 ?I2 ) math:difference [ math:notEqualTo 0 ].
} => { ?O1 owl:differentFrom ?O2 }.

{ 
	?O1 :id ?I1;
	  :genre ?G1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :date ?D2. 
  	(?I1 ?I2 ) math:difference 0.
} => { ?O1 owl:sameAs ?O2 }.

#list rule deprecated
#{?L rdf:first ?I; a rdf:List} => {?I list:in ?L}.
#{?L rdf:rest ?R; a rdf:List. ?I list:in ?R} => {?I list:in ?L}.

#genre :parteOf rule
{
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
	?G1 rdf:first ?a1.
  	?a1 list:in ?G2.
	
} =>{ ?G1 :partOf ?G2 }.

{
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
	?G1 rdf:rest ?a1.
  	?a1 rdf:first ?a2.
  	?a2 list:in ?G2.
	
} =>{ ?G1 :partOf ?G2 }.
{
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
	?G1 rdf:rest rdf:nil.
	
} =>{ ?G1 :notpartOf ?G2 }.
#actor :partOfAct rule
{
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
	?A1 rdf:first ?a1.
  	?a1 list:in ?A2.
	
} =>{ ?A1 :partOfAct ?A2 }.

{
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
	?A1 rdf:rest ?a1.
  	?a1 rdf:first ?a2.
  	?a2 list:in ?A2.
	
} =>{ ?A1 :partOfAct ?A2 }.
{
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
	?A1 rdf:rest rdf:nil.
	
} =>{ ?A1 :notpartOfAct ?A2 }.

# inference rule
# 1. 연도가 같음
# 2. 장르가 포함되어 있어야 함
# 3. 그런데 둘은 달라야함
{ 
	?O1 :id ?I1;
	  :genre ?G1;
	  :actor ?A1;
	  :date ?D1.
  	?O2 :id ?I2;
	  :genre ?G2;
	  :actor ?A2;
	  :date ?D2.
  	?O1 owl:differentFrom ?O2.
  	?G1 :partOf ?G2.
  	?A1 :partOfAct ?A2.

  	( ?D1 ?D2 ) math:difference 0.

} => { ?O1 :alsoLike ?O2 }.
